"raicecar".lenght
"raicecar".lengtg
"raicecar".length
"racecar".reverse
s = "rasecar"
s == s.reverse
s = "racecar"
s == s.reverse
a = "A man, a plan, a canal, Panama".split(",")
a
a.join()
s = s.split().join()
a = a.split().join()
a = "A man, a plan, a canal, Panama".split().join()
a = "A man, a plan, a canal, Panama".split().join().split(",").join()
a.downcase
a
a.downcase == a.downcase.reverse
(a..z)[7]
(a..z).to_a[7]
("a".."z").to_a[7]
("a".."z")[7]
(0..16)
(0..16).to_a
(0...16).to_a
(0..16).to_a.map{ |n| n**2}
def yeller(array) do\
  array.map{&:upcase}.join()\
end
def yeller(array) do\
  array.map{|n| n.upcase}.join()\
end
def yeller(array)\
  array.map{|n| n.upcase}.join()\
end
yeller(["o","l","d"])
user = {"foo":"bar", "taro":"jiro"}
usr
user
user = {"foo":"bar", "taro": "jiro"}
p "hoge"
p nil
p :name
put :name
puts :name
 { "a" => 100, "b" => 200 }.merge({ "b" => 300 })
Range.new(1, 10)
Range.new(1, 10) == 1..10
Range.new(1, 10) == (1..10)
class Word < String\
  def palindrome?\
    self == self.reverse\
  end\
end
w = Word.new("hogegoh")
w.palindrome?
hoge = Hash.new
hoge.superclass
hoge.class
hoge.class.superclass
foo = User.new 
foo.classs
foo.class
foo.class.class
foo.class.superclass
exit
foo = User.new
foo.name.clas
foo.name.class
foo = User.create(name: "A Nother", email: "another@example.org")
foo
foo.name.class
foo.created_at.class
User.find(1)
User.find(0)
foo.destroy
foo
foo.name = "hoge"
goo
foo
bar = User.new
bar.name = "HOge"
bar
user.update_attributes(email: test)
bar.update_attributes(email: "test")
bar
bar.created_at = bar.created_at.1.years.ago
bar.created_at = 1.years.ago(bar.created_at)
u = User.new
u.valid?
u.errors.masseges
u.errors.messages
u = User.new
u.name ="foo"
u.email ="foo"
u.valid?
u.email ="foo@bar.com"
u.valid?
u.errors.messages
u = User.new
u = User.new(name: "foo", email: "foo@bar.com", password: "foo"~\
)
u = User.new(name: "foo", email: "foo@bar.com", password: "foo")
u.valid?
u.errors.messages
 User.create(name: "Michael Hartl", email: "mhartl@example.com",\
password: "foobar", password_confirmation: "foobar")
user = User.find_by(email: "mhartl@example.com")
user.password_digest
user.authenticate("foobar")
user.authenticate("foobr")
user
user.authenticate("foobar")
User.new.authenticate("foobar")
foo = User.new ;foo.authenticate("foobar")
foo = User.new
foo.authenticate("foobar")
foo = User.find(name: "Michael Hartl")
foo = User.find_by(name: "Michael Hartl")
foo
foo.name = "taro"
foo.save
foo.errors.messages
user = User.first
puts user.attributes.to_yaml
y user.attribute
y user.attributes
user = User.first 
user.update_attributes(name: "Example User", email: "example@railstutorial.org", password: "foobar", password_confirmation: "foobar")
rails t
get signup_path
puts "#{:success}"
p :success
puts :success
