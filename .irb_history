"raicecar".lenght
"raicecar".lengtg
"raicecar".length
"racecar".reverse
s = "rasecar"
s == s.reverse
s = "racecar"
s == s.reverse
a = "A man, a plan, a canal, Panama".split(",")
a
a.join()
s = s.split().join()
a = a.split().join()
a = "A man, a plan, a canal, Panama".split().join()
a = "A man, a plan, a canal, Panama".split().join().split(",").join()
a.downcase
a
a.downcase == a.downcase.reverse
(a..z)[7]
(a..z).to_a[7]
("a".."z").to_a[7]
("a".."z")[7]
(0..16)
(0..16).to_a
(0...16).to_a
(0..16).to_a.map{ |n| n**2}
def yeller(array) do\
  array.map{&:upcase}.join()\
end
def yeller(array) do\
  array.map{|n| n.upcase}.join()\
end
def yeller(array)\
  array.map{|n| n.upcase}.join()\
end
yeller(["o","l","d"])
user = {"foo":"bar", "taro":"jiro"}
usr
user
user = {"foo":"bar", "taro": "jiro"}
p "hoge"
p nil
p :name
put :name
puts :name
 { "a" => 100, "b" => 200 }.merge({ "b" => 300 })
Range.new(1, 10)
Range.new(1, 10) == 1..10
Range.new(1, 10) == (1..10)
class Word < String\
  def palindrome?\
    self == self.reverse\
  end\
end
w = Word.new("hogegoh")
w.palindrome?
hoge = Hash.new
hoge.superclass
hoge.class
hoge.class.superclass
